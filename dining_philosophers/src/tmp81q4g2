
use std::thread;
use std::sync::Mutex{M};

struct Philosopher
{
	name: String,
	left: usize,
	right: usize,
}

impl Philosopher 
{
	fn new(name: &str) -> Philosopher
	{
		Philosopher
		{
			name: name.to_string(),
			left: left,
			right: right,
		}
	}

	fn eat(&self)
	{
		let _left = table.forks[self.left].lock().unwrap();
		let _right = table.forks[self.right].lock().unwrap();

		println!("{} is eating.", self.name);

		thread::sleep_ms(1000);

		println!("{} is done eating.", self.name);
	}
}

struct Table 
{
	forks: Vec<Mutex<()>>,
}

fn main()
{
	let table = Arc::new(Table {forks: vec!
		[
			Mutex::new(()),
			Mutex::new(()),
			Mutex::new(()),
			Mutex::new(()),	
			Mutex::new(()),	
		]}) 

	let philosophers = vec!
	[
		Philosopher::new("Baruch Spinoza", 0, 1),
		Philosopher::new("Gilles Deleuze", 1, 2),
		Philosopher::new("Karl Marx", 2, 3),
		Philosopher::new("Friedrich Nietzsche", 3, 4),
		Philosopher::new("Michel Foucault", 0, 4),
	];

	let handles: Vec<_> = philosophers.into_iter().map(|p| 
	{
		let table = table.clone();

		thread::spawn(move || 
		{
			p.eat();
		})
	}).collect();

	for h in handles
	{
		h.join().unwrap();
	}
}